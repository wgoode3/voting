{"version":3,"sources":["utilities.js","Library.js","App.js","serviceWorker.js","index.js"],"names":["Array","prototype","iSort","key","i","this","length","j","temp","Library","react_default","a","createElement","props","library","name","votes","onClick","onVote","bind","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","libraries","toConsumableArray","state","setState","reset","_this2","className","map","src_Library","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,MAAMC,UAAUC,MAAQ,SAASC,GAC/B,IAAI,IAAIC,EAAE,EAAGA,EAAEC,KAAKC,OAAQF,IAC1B,IAAI,IAAIG,EAAEH,EAAGG,EAAE,GACVF,KAAKE,GAAGJ,GAAOE,KAAKE,EAAE,GAAGJ,GADZI,IAAI,CAElB,IAAIC,EAAOH,KAAKE,GAChBF,KAAKE,GAAKF,KAAKE,EAAE,GACjBF,KAAKE,EAAE,GAAKC,EAMlB,OAAOH,4HCSMI,mLAhBX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAIP,KAAKQ,MAAMC,QAAQC,KACrBL,EAAAC,EAAAC,cAAA,YAAOP,KAAKQ,MAAMC,QAAQE,MAA1B,QACEN,EAAAC,EAAAC,cAAA,UAAQK,QAASZ,KAAKQ,MAAMK,OAAOC,KAAKd,KAAMA,KAAKQ,MAAMC,UAAzD,OAKJJ,EAAAC,EAAAC,cAAA,mBAZcQ,aCoDPC,qBAjDb,SAAAA,EAAYR,GAAM,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMQ,KAWRK,OAAS,SAACJ,GACR,IAAIc,EAASL,OAAAM,EAAA,EAAAN,CAAOD,EAAKQ,MAAMF,WAC/B,IAAI,IAAIxB,KAAKwB,EACRA,EAAUxB,KAAOU,GAClBc,EAAUxB,GAAGY,QAGjBY,EAAYA,EAAU1B,MAAM,SAC5BoB,EAAKS,SAAS,CAACH,UAAWA,KApBVN,EAuBlBU,MAAQ,WACN,IAAIJ,EAASL,OAAAM,EAAA,EAAAN,CAAOD,EAAKQ,MAAMF,WAC/B,IAAI,IAAIxB,KAAKwB,EACXA,EAAUxB,GAAGY,MAAQ,EAEvBM,EAAKS,SAAS,CAACH,UAAWA,KA1B1BN,EAAKQ,MAAQ,CACXF,UAAW,CACT,CAACb,KAAQ,QAASC,MAAS,GAC3B,CAACD,KAAQ,MAAOC,MAAS,GACzB,CAACD,KAAQ,UAAWC,MAAS,GAC7B,CAACD,KAAQ,QAASC,MAAS,KAPfM,wEA+BT,IAAAW,EAAA5B,KACP,OACEK,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,aAEX7B,KAAKyB,MAAMF,UAAUO,IAAK,SAACrB,EAASV,GAAV,OACxBM,EAAAC,EAAAC,cAACwB,EAAD,CACEjC,IAAKC,EACLU,QAASA,EACTI,OAAQe,EAAKf,WAInBR,EAAAC,EAAAC,cAAA,UAAQK,QAASZ,KAAK2B,OAAtB,iBA5CUZ,cCQEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ff81f6d1.chunk.js","sourcesContent":["Array.prototype.iSort = function(key){\n  for(let i=1; i<this.length; i++){\n    for(let j=i; j>0; j--){\n      if(this[j][key] > this[j-1][key]){\n        let temp = this[j];\n        this[j] = this[j-1];\n        this[j-1] = temp;\n      }else{\n        break;\n      }\n    }\n  }\n  return this;\n}","import React, { Component } from 'react';\n\nclass Library extends Component {\n\n  render() {\n    return(\n      <div>\n        <p>{this.props.library.name}\n          <span>{this.props.library.votes} &nbsp;\n            <button onClick={this.props.onVote.bind(this, this.props.library)}>\n              +\n            </button>\n          </span>\n        </p>\n        <hr />\n      </div>\n    );\n  }\n\n}\n\nexport default Library;","import React, { Component } from 'react';\nimport Library from './Library';\nimport './utilities';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      libraries: [\n        {\"name\": \"React\", \"votes\": 0},\n        {\"name\": \"Vue\", \"votes\": 0},\n        {\"name\": \"Angular\", \"votes\": 0},\n        {\"name\": \"Ember\", \"votes\": 0}\n      ]\n    }\n  }\n\n  onVote = (library) => {\n    let libraries = [...this.state.libraries];\n    for(let i in libraries){\n      if(libraries[i] === library){\n        libraries[i].votes++;\n      }\n    }\n    libraries = libraries.iSort(\"votes\");\n    this.setState({libraries: libraries});\n  }\n\n  reset = () => {\n    let libraries = [...this.state.libraries];\n    for(let i in libraries){\n      libraries[i].votes = 0;\n    }\n    this.setState({libraries: libraries});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        {\n          this.state.libraries.map( (library, i) => \n            <Library \n              key={i}\n              library={library} \n              onVote={this.onVote}\n            />\n          )\n        }\n        <button onClick={this.reset}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}